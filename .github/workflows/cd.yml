name: CD Deployment

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'CI Run ID to deploy'
        required: true
        type: string
      # NEW: Add an input for the deployment target
      target:
        description: 'Deployment target (e.g., azure, vm)'
        required: true
        type: string

permissions:
  id-token: write   # required for OIDC
  contents: read    # required for actions/checkout and GH API

jobs:
  # JOB 1: Deploy to Azure App Service
  deploy-to-azure:
    # NEW: This job only runs if the target input is 'azure'
    if: github.event.inputs.target == 'azure'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact from CI run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_NAME=python-app-artifact
          RUN_ID=${{ github.event.inputs.run_id }}
          echo "Downloading artifact $ARTIFACT_NAME from CI run $RUN_ID"

          DOWNLOAD_URL=$(gh api \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts \
            -q ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")

          if [ -z "$DOWNLOAD_URL" ]; then
            echo "❌ Artifact not found!"
            exit 1
          fi

          echo "✅ Artifact URL: $DOWNLOAD_URL"
          curl -L -H "Authorization: token $GH_TOKEN" -o artifact.zip "$DOWNLOAD_URL"
          unzip -o artifact.zip -d python-app-artifact

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: TaskManagerDemo   # your App Service name
          slot-name: 'production'
          package: './python-app-artifact'

  # # JOB 2: Deploy to a Docker
  #     - name: Deploy-to-docker-python
  #       if: github.event.inputs.target == 'docker_python'
  #       run: |
  #             echo "Deploying via Docker..."
  #             ssh devuser@172.17.0.1 "docker pull ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }} \
  #               && docker stop app || true \
  #               && docker rm app || true \
  #               && docker run -d --name app -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }}"

    # JOB 2: Deploy to a Docker
  deploy-to-docker:  
          if: github.event.inputs.target == 'docker_python'
          runs-on: ubuntu-latest
          steps:
            - name: Docker Deployment
              run: |
                echo "Deploying via Docker..."
                ssh devuser@172.17.0.1 "docker pull ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }} \
                && docker stop app || true \
                && docker rm app || true \
                && docker run -d --name app -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }}"

  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download artifact (same as above)
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         # This script is identical to the one in the Azure job
  #         # In a real-world scenario, you might make this a reusable workflow
  #         ARTIFACT_NAME=python-app-artifact
  #         RUN_ID=${{ github.event.inputs.run_id }}
  #         DOWNLOAD_URL=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts -q ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")
  #         curl -L -H "Authorization: token $GH_TOKEN" -o artifact.zip "$DOWNLOAD_URL"
  #         unzip -o artifact.zip -d python-app-artifact
      
  #     # Placeholder for actual VM deployment steps
  #     - name: Deploy to VM
  #       run: |
  #         echo "Deployment to VM would happen here."
  #         echo "You would typically use SSH, SCP, or Ansible."
  #         ls -la python-app-artifact
