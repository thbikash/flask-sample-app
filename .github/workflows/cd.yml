name: CD Deployment

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'CI Run ID to deploy'
        required: true
        type: string
      # NEW: Add an input for the deployment target
      target:
        description: 'Deployment target (e.g., azure, vm)'
        required: true
        type: string

permissions:
  id-token: write   # required for OIDC
  contents: read    # required for actions/checkout and GH API

jobs:
  # JOB 1: Deploy to Azure App Service
  deploy-to-azure:
    # NEW: This job only runs if the target input is 'azure'
    if: github.event.inputs.target == 'azure'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact from CI run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ARTIFACT_NAME=python-app-artifact
          RUN_ID=${{ github.event.inputs.run_id }}
          echo "Downloading artifact $ARTIFACT_NAME from CI run $RUN_ID"

          DOWNLOAD_URL=$(gh api \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts \
            -q ".artifacts[] | select(.name==\"$ARTIFACT_NAME\") | .archive_download_url")

          if [ -z "$DOWNLOAD_URL" ]; then
            echo "❌ Artifact not found!"
            exit 1
          fi

          echo "✅ Artifact URL: $DOWNLOAD_URL"
          curl -L -H "Authorization: token $GH_TOKEN" -o artifact.zip "$DOWNLOAD_URL"
          unzip -o artifact.zip -d python-app-artifact

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: TaskManagerDemo   # your App Service name
          slot-name: 'production'
          package: './python-app-artifact'

# JOB 2: Deploy to a Docker
  # deploy-to-docker1:  
  #         if: github.event.inputs.target == 'docker_python'
  #         runs-on: self-hosted
  #         steps:
  #           - name: Docker Deployment
  #             run: |
  #               echo "Deploying docker-image flask app on the locall hosted docker..."
  #               docker pull ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }}
  #               docker stop cbe23ff9e390 || true
  #               docker rm cbe23ff9e390 || true
  #               docker run -d --name cbe23ff9e390 -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }}


  deploy-to-docker:  
    if: github.event.inputs.target == 'docker_python'
    runs-on: self-hosted # This is correct, it runs on your local machine
    steps:
      - name: Docker Deployment
        run: |
          # Define a consistent name for your container
          CONTAINER_NAME="flask-sample-app"

          echo "Deploying Docker image to local container: $CONTAINER_NAME"

          echo "1. Pulling latest image..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }}

          echo "2. Stopping and removing existing container (if any)..."
          # Stop and remove the container BY NAME. "|| true" prevents failure if it doesn't exist.
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          echo "3. Starting new container..."
          # Run the new container WITH THE SAME NAME.
          docker run -d --name $CONTAINER_NAME -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/flask-sample-app:${{ github.event.inputs.run_id }}

          echo "✅ Deployment complete."                
